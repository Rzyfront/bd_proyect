"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&neb)pk4y58u@*+&^o+7=hbz^=^pmz+&s5^4yz8_n9@mgrw-2&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # MyApps
    'MyApps.customers',
    'MyApps.tourist_sites',
    'MyApps.tour_plans',
    'MyApps.tour_requests',
    'MyApps.service_records',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database Configuration
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DB_ENGINE = os.getenv('DB_ENGINE', 'postgresql').lower()

if DB_ENGINE == 'postgresql':
    ENGINE = 'django.db.backends.postgresql'
    NAME = os.getenv('DB_NAME', 'empresa_turismo')
elif DB_ENGINE == 'mysql':
    ENGINE = 'django.db.backends.mysql'
    NAME = os.getenv('DB_NAME', 'empresa_turismo')
elif DB_ENGINE == 'mssqlserver':
    ENGINE = 'mssql'  # Requiere django-mssql-backend
    NAME = os.getenv('DB_NAME', 'empresa_turismo')
elif DB_ENGINE == 'oracle':
    ENGINE = 'django.db.backends.oracle'
    # Para Oracle con PDB, la conexi√≥n se hace con HOST:PORT/SERVICE
    db_name = os.getenv('DB_NAME', 'empresa_turismo')
    if '/' in db_name or ':' in db_name:
        # Si DB_NAME ya contiene el formato completo HOST:PORT/SERVICE
        NAME = db_name
    else:
        # Construir el formato HOST:PORT/SERVICE
        NAME = f"{os.getenv('DB_HOST', 'localhost')}:{os.getenv('DB_PORT', '1521')}/{os.getenv('DB_SERVICE', 'xe')}"
else:
    raise ValueError(f"Unsupported DB_ENGINE: {DB_ENGINE}")

if DB_ENGINE == 'oracle':
    DATABASES = {
        'default': {
            'ENGINE': ENGINE,
            'NAME': NAME,  # Para Oracle, NAME contiene HOST:PORT/SERVICE
            'USER': os.getenv('DB_USER', 'freepdb1'),
            'PASSWORD': os.getenv('DB_PASSWORD', 'Desarrollo123$%'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': ENGINE,
            'NAME': NAME,
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', 'Desarrollo123$%'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432' if DB_ENGINE == 'postgresql' else ('3306' if DB_ENGINE == 'mysql' else '1433')),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
